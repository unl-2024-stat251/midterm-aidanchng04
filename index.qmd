---
title: 251 Midterm Exam
author: Khai Shen Chng (Aidan)
date: '2024-03-07'
execute:
  error: false
categories:
- Exam
- Week07
---

In this exam, you'll be using data collected about US polling places. The [Center for Public Integrity](https://publicintegrity.org/) assembled this data using open records requests and contact with state or county election officials. Full documentation is available on the [github repository for the data](https://github.com/PublicI/us-polling-places) - each state's details can be found in a README file for that state; there is also a machine-readable `manifest.yaml` file for each state provided.

We will start out by using data assembled by the TidyTuesday project, but will eventually get to the raw data as well.

The raw CSV data is available at https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2024/2024-01-16/polling_places.csv

```{r r-setup}
# load any R packages you use in this chunk
library(ggplot2)
library(dplyr)
library(readr)
library(tidyr)
```

```{python py-setup}
# load any python packages you use in this chunk
import pandas as pd
import numpy as np
```

# Data Input - Polling Places
(30 pts)

## Data File Inspection

Here are the first six lines of the TidyTuesday CSV file:

```     
election_date,state,county_name,jurisdiction,jurisdiction_type,precinct_id,precinct_name,polling_place_id,location_type,name,address,notes,source,source_date,source_notes
2020-11-03,AL,AUTAUGA,AUTAUGA,county,NA,AUTAUGAVILLE VOL FIRE DEPT,NA,election_day,AUTAUGAVILLE VOL FIRE DEPT,"2610 HIGHWAY 14 W, AUTAUGAVILLE, AL 36003",NA,ORR,2020-10-21,NA
2020-11-03,AL,AUTAUGA,AUTAUGA,county,NA,BILLINGSLEY COMMUNITY CENTER,NA,election_day,BILLINGSLEY COMMUNITY CENTER,"2159 COUNTY RD 37, BILLINGSLEY, AL 36006",NA,ORR,2020-10-21,NA
2020-11-03,AL,AUTAUGA,AUTAUGA,county,NA,BOONE'S CHAPEL,NA,election_day,BOONE'S CHAPEL,"2301 COUNTY RD 66, PRATTVILLE, AL 36067",NA,ORR,2020-10-21,NA
2020-11-03,AL,AUTAUGA,AUTAUGA,county,NA,BOOTH VOL FIRE DEPT,NA,election_day,BOOTH VOL FIRE DEPT,"1701 COUNTY ROAD 10, BOOTH, AL 36008",NA,ORR,2020-10-21,NA
2020-11-03,AL,AUTAUGA,AUTAUGA,county,NA,CAMELLIA BAPTIST CH,NA,election_day,CAMELLIA BAPTIST CH,"201 WOODVALE ROAD, PRATTVILLE, AL 36067",NA,ORR,2020-10-21,NA
```

1.  What is the file delimiter? (1 pt)    
Comma Delimiter (',')

2.  What is the header? (1 pt)    
election_date,state,county_name,jurisdiction,jurisdiction_type,precinct_id,precinct_name,polling_place_id,location_type,name,address,notes,source,source_date,source_notes

3.  How many columns will the data have when it is read in using R or Python? (1 pt)    
15

4.  How is the data stored differently in the address field compared to the name field (1 pt), and why is this different handling necessary (1 pt)?    
The address field is stored within " " quotation marks whereas the name field isn't. Although they both contain spaces between the strings, the main difference is that the address field contains commas within the string, hence quoting them within " " is necessary since the CSV file is delimited using comma delimiters.

## Reading the Data

Read in the data in R (5 pts) and in python (5 pts).

Make sure to load any packages which are necessary to run your code in the setup chunks at the beginning of the document.

```{r r-read-data}
data <- "https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2024/2024-01-16/polling_places.csv"
tidyTuesday <- read.csv(data)
tidyTuesday
```

```{python py-read-data}
data = "https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2024/2024-01-16/polling_places.csv"
tidyTuesday = pd.read_csv(data)
print(tidyTuesday)
```

## Summarize the Data

Using any method you choose from either language, fill in the following table.

Language used: <Fill in>

Make sure your terms match the language you're using and the code you provided above. If you use code to get these values (which is probably a good idea), please use the code chunks provided here:

```{r r-data-summary-code}
#Data Type
summary(tidyTuesday)

#Number of Missing Values
missing_values_count <- colSums(is.na(tidyTuesday))
missing_values_count

#Number of Unique Values
unique_values_count <- sapply(tidyTuesday, function(x) n_distinct(na.omit(x)))
unique_values_count

```

```{python py-data-summary-code}
#Data Type
pd.set_option('display.max_columns', None)
tidyTuesday.describe()

#Number of Missing Values
missing_values_df = tidyTuesday.isna()
missing_values_df.sum()

#Number of Unique Values
tidyTuesday.nunique()
```


When computing the number of unique values, exclude missing values.

| Column Name       | Data Type (5 pts) | # missing values (5 pts) | # unique values (5 pts) |
|-------------------|-------------------|--------------------------|-------------------------|
| election_date     |     character     |          0               |           7             |
| state             |     character     |          0               |           39            |
| county_name       |     character     |        114568            |          1880           |
| jurisdiction      |     character     |        103599            |          9206           |
| jurisdiction_type |     character     |          60              |           7             |
| precinct_id       |     character     |        148834            |          50287          |
| precinct_name     |     character     |        96860             |         110887          |
| polling_place_id  |     character     |        408178            |          11145          |
| location_type     |     character     |        192830            |           6             |
| name              |     character     |          75              |         105985          |
| address           |     character     |         2996             |         151319          |
| notes             |     character     |        416312            |          9614           |
| source            |     character     |          0               |           4             |
| source_date       |     character     |          0               |           36            |
| source_notes      |     character     |        425353            |           4             |

: Summary of Polling Data

# Data Cleaning - Polling Places over Time
(50 pts)

For this part of the exam, you'll use your student ID to get the state you'll be working with. 
```{r student-id-state-assign}
my_nuid <- 90328958# Change this value to your NUID
state_ids <- readRDS("state-ids.RDS")
my_state <- state_ids$state[my_nuid%%37]
print(my_state)
```

Your end goal is to get a plot of the number of available polling places in each election, with separate lines for each jurisdiction (e.g. county) within your state. 

## Steps
(10 pts)

Write out the steps (in plain language) required to get from the polling place data provided [here](https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2024/2024-01-16/polling_places.csv) to the data you need to create your plot.
Make sure to remove polling places which do not make sense - e.g. those with an address consisting of just the state name, or those named "DO NOT USE". 

For each step, identify the data manipulation verb you will use, and any variables you will pass in as arguments. 
Fill in the following table when you are finished. 
Add new rows by moving to a new line, and separate each cell in the table with ` | ` (spaces matter). `|` is on the key above the enter key and shares a key with `\` (backslash). You will need to hold shift down.

Step # | Verb       | Arguments
-------| ---------- | ---
 1     | filter     | state == "GA"
 2     | toupper    | state$jurisdiction
 3     | unique     | jurisdictions <- unique(state$jurisdiction)
 4     | as.list    | numYears <- as.list(state$election_date)
 5     | data.frame | final <- data.frame(Jurisdiction = jurisdiction)
 6     | for        | iterating through i in numYears
 7     | start      | (start for loop)
 8     | paste      | colName <- paste(i)
 9     | filter     | date <- filter(state, election_date == i)
 10    | group_by   | test <- date %>% group_by(jurisdiction)
 11    | summarise  | %>% summarise(pollingNum = length(unique(address)))
 12    | mutate     | final %>% mutate(!!colName := test$polling_number)
 13    | end        | (end for loop)
 


## Code
(10 pts)

Write code in R or python to execute the steps you outlined above.

```{r}
state <- filter(tidyTuesday, state == "GA")

state$jurisdiction <- toupper(state$jurisdiction)

jurisdictions <- ((unique(state$jurisdiction)))
numYears <- as.list(unique(state$election_date))

final <- data.frame(Jurisdiction = jurisdictions)

for (i in numYears) {
  colName <- paste(i)

  date <- filter(state, election_date == i)
  
  test <- date %>%
      group_by(jurisdiction) %>%
      summarise(polling_number = length(unique(address)))

  final <- final %>%
      mutate(!!colName := test$polling_number)
}

final
```

## Chart Description
(7 pts)

Use the grammar of graphics to identify the components of the chart here, which provides the data for Wisconsin.
![Wisconsin counties where the number of polling places changed, 2012-2020](wisconsin-example.jpg){width="50%"}

- geom: line
- aesthetics: (list at least 3)
  - x = Date
  - y = Number of Polling Places per County
  - group = Jurisdiction
- coordinate system: Cartesian
- y axis scale: Continuous Scale
- x axis scale: Date Scale


## Chart
(20 pts)

Write code in R or python to create a chart like that shown at the beginning of this example (5 pts). 
Make sure your axes are labeled (5 pts) and your chart has a title (5 pts).
Include your plot in this document and make sure you have a figure caption that describes what someone should notice in the chart (5 pts)
You may do this either by modifying the chunk options or by using `include=F` and manually including the picture with a caption.

```{r, include=TRUE}
long <- gather(final, key = "Date", value = "Polling_Numbers", -Jurisdiction)

plot <- ggplot(long, aes(x = Date, y = Polling_Numbers, group = Jurisdiction)) +
               geom_line(size = 0.2) +
               labs(title = "Georgia Polling Places Change (2016-2020)",
               x = "Year",
               y = "Number of Polling Places per County") +
               theme_minimal()


plot + theme(plot.margin = margin(r = 1, unit = "mm"))
```

## Modifications

Evaluate the chart you created for comprehensibility and accessibility. (1 pt)

In terms of comprehensibility, I think it's a bit hard to read the graph as all the lines are in black. 
Furthermore, there isn't a legends section to indicate which jurisdiction belongs to which line.

In terms of accessability, it's not really accessible as I wrote the code into 2 separate chunks of r code.
Moreover, I hard-coded the state name so it may not be convenient to run this code for other states.


What modifications might you add to this chart to make it clearer and more understandable? (2 pts)

To improve comprehensibility, I would add a legends section next to the graph and assign a color for each
jurisdiction, color-coding all the lines with their respective colors.

To improve accessability, I would combine both chunks or R code into one and compress them all within a function.
Then, the input of the function would be the state name. That way, it would be easier to parse the states within
the functions and call them to obtain the results. 



# Data Processing
(20 pts)

You want to mail a letter to every polling place in the state you were assigned. In order to do this, you need to separate out the pieces of the address: building number, street, city, state, and zip code. 
Note that not all addresses will have all of these components - in Alaska, for example, there are often not street numbers or even names. 

## Function Steps
(5 pts)

Use the following addresses to think through the steps you will need to accomplish this task.

```
Tatitlek, AK 99677
First Street, Cordova, AK 99574
105 ICE ST, MENASHA, WI 54952-3223
1025 W 5TH AVE, OSHKOSH, WI 54902
1702 COUNTY ROAD 40 W, PRATTVILLE, AL 36067
5281 HIGHWAY 29, CORINTH VFD (PEROTE STATION), BANKS, AL 36005
713 W. MOUNTAIN AVENUE, JACKSONVILLE, AL 36265
COMMUNITY CENTER, 1168 HWY 84, SILAS, AL 36919
```

Write out the steps your function will need to accomplish in plain language.

1) Break down the address into different parts by splitting them from commas and store as (address)

2) Make 3 scenarios where there could be 1, 2 or 3 commas

3) For every address, there will be at least a city, state and postcode. So iterate through (address)
   i  ) For address[-1], it should be the address and zipcode so split them from " " and we can get both of those
   ii ) For address[-2], that should be the city
   
4) If there is only one comma, that means it only contains a city, state and zipcode. Therefore, we would...
   i. ) Apply step 3 to get city, state and postcode
   ii ) Add none in front of (address) until address length is 4
   iii) The first two NA values of (address) will be the builidngNum and street
   
5) If there are two commas, that means there will also be at least a street and potentially builingNum. Therefore..
   i  ) Apply step 3 to get city, state and postcode
   ii ) For address[0], split it from " " and see if the first term is an integer
        a) If it is, that is the builidngNum
        b) If it isn't, builidngNum = None
   iii) Combine the splitted words back to create street

6) If there are three commas, all elements will be there so
   i  ) Apply step 3 to get city, state and postcode
   ii ) For address[-3], that should be the street
   111) For address[-4], that should be the buildingNum
   
7) Return the 5 elements of the address



## Function Code - Single Address
(5 pts)

Write a function, `address_parser`, which can handle a single address and return a data structure containing each piece of the address, with NAs for pieces which are not matched.

(change this chunk to python if you'd prefer to use python over R for this task)
```{python single-address-parser}
def address_parser(address):
  
  #splitting the address by commas
  address_list = address.split(",")

  #my method is to break the address down according to how many commas there are
  
  #if there is only one comma
  if len(address_list) == 2:
    
    #use while loop to add NA values at the beginning of the list
    while len(address_list) < 4:
      address_list.insert(0, None)
    
    #code to get state and zipcode
    last = address_list[-1]
    stateZip = last.split(" ")
    stateZip = stateZip[1:]
    state = stateZip[0]
    if len(stateZip) == 2:
      zipCode = stateZip[1]
    else:
      zipCode = None
    
    #code to get builidngNum, street and city
    city = address_list[-2]
    street = address_list[-3]
    buildingNum = address_list[-4]
  
  
  #if there are 2 commas
  elif len(address_list) == 3:
    #code to get state and zipcode
    last = address_list[-1]
    stateZip = last.split(" ")
    stateZip = stateZip[1:]
    state = stateZip[0]
    if len(stateZip) == 2:
      zipCode = stateZip[1]
    else:
      zipCode = None
    
    #code to get city
    city = address_list[-2]
    
    #code to get buildingnum and street
    first = address_list[-3]
    buildingStreet = first.split(" ")
    try:
      buildingStreet[0] = int(buildingStreet[0])
      buildingNum = str(buildingStreet[0])
      buildingStreet = buildingStreet[1:]
    except ValueError:
      buildingNum = None
    street = " ".join(buildingStreet)
    

  #if there are 3 commas
  else:
    #code to get state and zipcode
    last = address_list[-1]
    stateZip = last.split(" ")
    stateZip = stateZip[1:]
    state = stateZip[0]
    if len(stateZip) == 2:
      zipCode = stateZip[1]
    else:
      zipCode = None
      
    #code to get buildingnum, street, city
    city = address_list[-2]
    street = address_list[-3]
    buildingNum = address_list[-4]

  #return the 5 elements of an address
  return buildingNum, street, city, state, zipCode
```


This chunk will test your function on the addresses provided as examples. 
(change this chunk to python if you used python above)
```{python single-address-parser-test, error = T}
address_parser("Tatitlek, AK 99677")
address_parser("First Street, Cordova, AK 99574")
address_parser("105 ICE ST, MENASHA, WI 54952-3223")
address_parser("1025 W 5TH AVE, OSHKOSH, WI 54902")
address_parser("1702 COUNTY ROAD 40 W, PRATTVILLE, AL 36067")
address_parser("5281 HIGHWAY 29, CORINTH VFD (PEROTE STATION), BANKS, AL 36005")
address_parser("713 W. MOUNTAIN AVENUE, JACKSONVILLE, AL 36265")
address_parser("COMMUNITY CENTER, 1168 HWY 84, SILAS, AL 36919")
```

## Function Code - Vector
(5 pts)

Write a function, `address_vec`, which can parse a vector of addresses and return a data frame with columns corresponding to each piece of the address.

(change this chunk to python if you'd prefer to use python over R for this task)
```{python vector-address-parser}

def address_vec(vector):
  columns = ["Building Number", "Street", "City", "State", "Zip Code"]
  df = pd.DataFrame(columns = columns)
  print(df)
  for eachAddress in vector:
    # print("loop)
    buildingNum, street, city, state, zipCode = address_parser(eachAddress)
    newRow = {"Building Number": buildingNum, "Street": street, "City": city, "State": state, "Zip Code": zipCode}
    df.loc[len(df)] = newRow
  return df
```


This chunk will test your function on the addresses provided as examples. Delete whichever chunk corresponds to the language you didn't use. 

```{python py-vector-address-parser-test, error = T}
test_vec = ["Tatitlek, AK 99677", "First Street, Cordova, AK 99574", "105 ICE ST, MENASHA, WI 54952-3223", "1025 W 5TH AVE, OSHKOSH, WI 54902", "1702 COUNTY ROAD 40 W, PRATTVILLE, AL 36067", "5281 HIGHWAY 29, CORINTH VFD (PEROTE STATION), BANKS, AL 36005", "713 W. MOUNTAIN AVENUE, JACKSONVILLE, AL 36265", "COMMUNITY CENTER, 1168 HWY 84, SILAS, AL 36919"]

address_vec(test_vec)
```

## Function Evaluation

Use your function to parse a vector of the unique polling place addresses in your state, creating a data table of address components for your letters.
(5 pts)

```{r}
#filtering for a vector of the unique polling place addresses in Georgia
state <- filter(tidyTuesday, state == "GA")
state$jurisdiction <- toupper(state$jurisdiction)
jurisdictions <- ((unique(state$jurisdiction)))

addresses <- state %>%
  group_by(jurisdiction) %>%
  summarise(address = address)

vector = c(addresses$address)
```

```{python r-function-eval}
#reticulating r dataset to 
vector = r.vector

#run the function
address_vec(vector)
```

Where did your function have issues, if it did? (5 pts)

Firstly, my function was coded in Python so I had to clean the data using R and reticulate it to Python. 

Secondly, my function was able to break down all the example addresses but when it came to all the unique
polling place addresses in Georgia, I realised that some of these addresses did not have a zipcode. At first,
I assumed that it was an anomaly at index 51 so I deleted the row and ran the code again. However, the 
error reccured again so I checked the next few indexes rows and realised they all did not have zipcodes.

Hence, I had to adjust my address_parser() function by adding an if statement. If there wasn't a zipcode, zipcode =
None. After that, everything worked well. 


